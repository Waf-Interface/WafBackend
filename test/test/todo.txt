So good its done but now 500 internal error for making the waf off:
```
root@test:/home/test# curl -X 'POST'   'http://127.0.0.1:8081/waf/set_engine/'   -H 'Content-Type: application/json'   -d '{
    "username": "test",
    "password": "test",
    "power": "off"
}'
Internal Server Errorroot@test:/home/test# 
```
```
root@test:/home/test/Desktop/WI_Backend/test# /home/test/Desktop/WI_Backend/.venv/bin/python /home/test/Desktop/WI_Backend/app.py
WAF initialized successfully!
INFO:     Started server process [253764]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://127.0.0.1:8081 (Press CTRL+C to quit)
Found modsecurity on;
Found modsecurity_rules_file directive
ModSecurity Enabled (raw result): True
True
Found modsecurity on;
Found modsecurity_rules_file directive
ModSecurity Enabled (raw result): True
INFO:     127.0.0.1:48190 - "GET /waf/status/ HTTP/1.1" 200 OK
Nginx configuration updated to disable ModSecurity.
Failed to open modsecurity config file for reading or writing.
Failed to update ModSecurity configuration files.
INFO:     127.0.0.1:54548 - "POST /waf/set_engine/ HTTP/1.1" 500 Internal Server Error
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "/home/test/Desktop/WI_Backend/.venv/lib/python3.11/site-packages/uvicorn/protocols/http/h11_impl.py", line 403, in run_asgi
    result = await app(  # type: ignore[func-returns-value]
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/test/Desktop/WI_Backend/.venv/lib/python3.11/site-packages/uvicorn/middleware/proxy_headers.py", line 60, in __call__
    return await self.app(scope, receive, send)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/python3.11/site-packages/starlette/middleware/cors.py", line 85, in __call__
    await self.app(scope, receive, send)
  File "/home/test/Desktop/WI_Backend/.venv/lib/python3.11/site-packages/starlette/middleware/exceptions.py", line 62, in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
  File "/home/test/Desktop/WI_Backend/.venv/lib/python3.11/site-packages/starlette/_exception_handler.py", line 53, in wrapped_app
    raise exc

                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/test/Desktop/WI_Backend/.venv/lib/python3.11/site-packages/fastapi/routing.py", line 212, in run_endpoint_function
    return await dependant.call(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/test/Desktop/WI_Backend/api/waf.py", line 49, in set_mod_security
    success = waf.set_mod_security_power(power)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/test/Desktop/WI_Backend/services/waf.py", line 75, in set_mod_security_power
    raise Exception("Failed to set ModSecurity power.")
Exception: Failed to set ModSecurity power.
```
```
from fastapi import APIRouter, HTTPException
from services.waf import WAF  
from pydantic import BaseModel

waf = WAF()

router = APIRouter()

class WafRequest(BaseModel):

    username: str
    password: str
    body: str = None  
    rule: str = None  
    power: str = None
    host: str = None
    log: bool = False



@router.get("/status/")
async def check_mod_security_status():
    print(waf.is_mod_security_enabled())  # Call the method properly
    if waf.is_mod_security_enabled():
        return {"status": "success", "mod_security_enabled": True}
    else:
        return {"status": "failure", "mod_security_enabled": False}

@router.post("/auth/")
async def authenticate(request: WafRequest):
    if request.username != "test" or request.password != "test":
        raise HTTPException(status_code=401, detail="Authentication failed.")
    return {"status": "success"}

@router.post("/load_rule/")
async def load_rule(request: WafRequest):
    if not waf.check_waf_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    if request.rule and not waf.load_rule(request.rule):
        raise HTTPException(status_code=400, detail="Failed to load rule.")
    return {"status": "success"}


@router.post("/set_engine/")
async def set_mod_security(request: WafRequest):
    if request.power not in ["on", "off"]:
        raise HTTPException(status_code=400, detail="Invalid power option. Use 'on' or 'off'.")
    power = True if request.power == "on" else False
    success = waf.set_mod_security_power(power)
    if not success:
        raise HTTPException(status_code=400, detail="Failed to set ModSecurity power. Check permissions.")
    return {"status": "success"}


@router.post("/log_user/")
async def log_user_access(request: WafRequest):
    if not waf.check_waf_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    if not waf.log_user_access(request.username):
        raise HTTPException(status_code=400, detail="Failed to log user access.")
    
    return {"status": "success", "message": f"User access logged for {request.username}"}

@router.get("/show_logs/")
async def show_logs():
    if not waf.check_waf_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    logs = waf.show_logs()  
    if not logs:
        raise HTTPException(status_code=400, detail="Failed to show logs.")
    
    return {"status": "success", "logs": logs}

@router.post("/toggle_protection/")
async def toggle_protection_for_host(request: WafRequest):
    if not waf.check_waf_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    if request.host is None:
        raise HTTPException(status_code=400, detail="Host is required.")
    power = True if request.power == "on" else False
    if not waf.toggle_protection_for_host(request.host, power):
        raise HTTPException(status_code=400, detail="Failed to toggle protection for host.")
    return {"status": "success"}

@router.get("/show_audit_logs/")
async def show_audit_logs():
    logs = waf.show_audit_logs()
    if logs is None:
        raise HTTPException(status_code=400, detail="Failed to show audit logs.")
    
    return {"status": "success", "audit_logs": logs}

@router.post("/clear_audit_logs/")
async def clear_audit_logs():
    if not waf.clear_audit_logs():
        raise HTTPException(status_code=400, detail="Failed to clear audit logs.")
    return {"status": "success", "message": "Audit logs cleared successfully."}

@router.get("/show_modsec_rules/")
async def show_modsec_rules():
    if not waf.is_mod_security_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    
    rules = waf.show_modsec_rules() 
    if not rules:
        raise HTTPException(status_code=400, detail="Failed to show ModSecurity rules. Check directory permissions.")
    
    return {"status": "success", "modsec_rules": rules}  

@router.post("/new_rule/")
async def create_new_rule(request: WafRequest):
    if not waf.check_waf_enabled():
        raise HTTPException(status_code=400, detail="WAF is offline. Please enable ModSecurity first.")
    
    if not request.rule or not request.body:  # rule is needed instead of title
        raise HTTPException(status_code=400, detail="Both rule and body are required for the rule.")
    
    try:
        print(f"Creating rule with name: {request.rule} and body: {request.body}")
        
        rule_created = waf.create_new_rule(request.rule, request.body)  # use rule instead of title
        
        if not rule_created:
            raise HTTPException(status_code=400, detail="Failed to create new rule.")
        
    except Exception as e:
        print(f"Error during rule creation: {str(e)}")  
        if "already exists" in str(e):
            raise HTTPException(status_code=409, detail=str(e))  
        else:
            raise HTTPException(status_code=500, detail="An unexpected error occurred while creating the rule.")
    
    return {"status": "success", "message": f"Rule '{request.rule}' created successfully."}
```
```
import ctypes
import os
from ctypes import c_bool, c_char_p

class WAF:
    def __init__(self):
        if not lib.initialize():
            raise Exception("Failed to initialize WAF.")
        print("WAF initialized successfully!")

    def is_mod_security_enabled(self):
     result = lib.isModSecurityEnabled()
     print(f"ModSecurity Enabled (raw result): {result}")  # Debug log
     if not result:
         print("ModSecurity is not enabled. Please ensure it is correctly configured.")
     return result

    def check_waf_enabled(self):
        return self.is_mod_security_enabled()

    def load_rule(self, rule):
        if not self.check_waf_enabled():
            raise Exception("WAF is offline. Please enable ModSecurity first.")
        result = lib.loadRule(rule.encode('utf-8'))
        if not result:
            raise Exception(f"Failed to load rule: {rule}")
        return result

    def authenticate(self, username, password):
        if username == "test" and password == "test":
            return True
        return False

    def shutdown(self):
        print("Shutting down WAF...")
        lib.shutdown()

    def set_mod_security_power(self, enable):
        result = lib.setModSecurityPower(enable)
        if not result:
            raise Exception("Failed to set ModSecurity power.")
        return result

    def log_user_access(self, username):
        try:
            if not self.check_waf_enabled():
                raise Exception("WAF is offline. Please enable ModSecurity first.")
            result = lib.logUserAccess(username.encode('utf-8'))
            if not result:
                raise Exception(f"Failed to log user access for {username}.")
            return result
        except Exception as e:
            print(f"Error logging user access: {str(e)}")
            return False

    def show_logs(self):
        if not self.check_waf_enabled():
            raise Exception("WAF is offline. Please enable ModSecurity first.")
        result = lib.showLogs()
        if not result:
            raise Exception("Failed to show logs.")
        return result

    def toggle_protection_for_host(self, host, enable):
        if not self.check_waf_enabled():
            raise Exception("WAF is offline. Please enable ModSecurity first.")
        result = lib.toggleProtectionForHost(host.encode('utf-8'), enable)
        if not result:
            raise Exception(f"Failed to toggle protection for host: {host}")
        return result
    
    def show_audit_logs(self):
        buffer_size = 1024 * 1024  # 1 MB
        logs_buffer = ctypes.create_string_buffer(buffer_size)

        result = lib.showAuditLogs(logs_buffer, buffer_size)

        if result:
            return logs_buffer.value.decode('utf-8')
        else:
            return None

    def clear_audit_logs(self):
        result = lib.clearAuditLogs()
        return result
   
    def show_modsec_rules(self):
        result = lib.showModSecRules()  
        
        if not result:
            print("Failed to fetch ModSecurity rules.")
            return None
        
        rules = ctypes.cast(result, ctypes.c_char_p).value.decode('utf-8')  # Decode the C string to Python string
        
        rule_list = rules.splitlines()
        
        lib.free(result)
        
        return rule_list
    
    def create_new_rule(self, title, body):
        rules_directory = "/usr/local/nginx/rules/"

        if not os.path.exists(rules_directory):
            raise Exception(f"Directory does not exist: {rules_directory}")

        file_path = os.path.join(rules_directory, f"{title}.conf")

        if os.path.exists(file_path):
            raise Exception(f"Rule '{title}' already exists. Please choose a different title.")

        try:
            with open(file_path, 'w') as rule_file:
                rule_file.write(body)
            
            print(f"Rule {title} created successfully at {file_path}")
            
        except Exception as e:
            print(f"Failed to create rule: {e}")
            raise Exception(f"Failed to create new rule: {e}")

        return True
```
```

bool showLogs() {
    return waf->showLogs();
}

bool toggleProtectionForHost(const char* host, bool enable) {
    return waf->toggleProtectionForHost(host, enable);
}

WafGhm::WafGhm() : modsec(nullptr), rules(nullptr), modSecurityEnabled(true) {}

WafGhm::~WafGhm() {
    delete rules;
    delete modsec;
}

bool WafGhm::initialize() {
    modsec = new modsecurity::ModSecurity();
    rules = new modsecurity::RulesSet();
    return true;  
}

bool WafGhm::loadRule(const std::string& rule) {
    if (rules->load(rule.c_str()) < 0) {
        std::cerr << "Failed to load rule: " << rules->m_parserError.str() << std::endl;
        return false;
    }
    return true;
}

bool WafGhm::authenticate(const std::string& username, const std::string& password) {
    return (username == validUsername && password == validPassword);
}

void WafGhm::shutdown() {
    delete rules;
    delete modsec;
    rules = nullptr;
    modsec = nullptr;
}

bool WafGhm::setModSecurityPower(bool enable) {
    if (modsec) {
        if (!updateNginxConfig(enable) || !updateModSecurityConfig(enable)) {
            std::cerr << "Failed to update ModSecurity configuration files." << std::endl;
            return false;
        }

        // Command to reload Nginx configuration after updating ModSecurity
        std::string reloadCmd = "sudo systemctl reload nginx";
        int result = system(reloadCmd.c_str());
        
        if (result != 0) {
            std::cerr << "Failed to reload Nginx. Exit code: " << result << std::endl;
            return false;
        }

        modSecurityEnabled = enable;
        std::cout << "ModSecurity has been " << (enable ? "enabled" : "disabled") << "." << std::endl;
        return true;
    } else {
        std::cerr << "ModSecurity is not initialized." << std::endl;
        return false;
    }
}

bool WafGhm::logUserAccess(const std::string& username) {
    std::ofstream log(logFile, std::ios::app);
    if (!log.is_open()) {
        std::cerr << "Failed to open log file" << std::endl;
        return false;
    }

    time_t now = time(0);
    char* dt = ctime(&now);  
    log << "User: " << username << " Accessed at: " << dt << std::endl;
    log.close();
    return true;
}

bool WafGhm::showLogs() {
    std::ifstream log(logFile);
    if (!log.is_open()) {
        std::cerr << "Failed to open log file" << std::endl;
        return false;
    }

    std::string line;
    while (std::getline(log, line)) {
        std::cout << line << std::endl;
    }
    log.close();
    return true;
}

bool WafGhm::toggleProtectionForHost(const std::string& host, bool enable) {
    hostProtectionMap[host] = enable;
    return true;
}

bool WafGhm::updateNginxConfig(bool enable) {
    const std::string nginxConfigPath = "/usr/local/nginx/conf/nginx.conf";
    std::ifstream nginxConfigFile(nginxConfigPath);
    std::string line;
    std::string tempFilePath = "/tmp/nginx.conf.temp";
    std::ofstream tempFile(tempFilePath);

    if (!nginxConfigFile.is_open() || !tempFile.is_open()) {
        std::cerr << "Failed to open nginx config file for reading or writing." << std::endl;
        return false;
    }

    bool modSecurityFound = false;
    while (std::getline(nginxConfigFile, line)) {
        if (line.find("modsecurity") != std::string::npos) {
            modSecurityFound = true;
            line = (enable) ? "modsecurity on;" : "modsecurity off;";
        }
        tempFile << line << std::endl;
    }

    if (!modSecurityFound) {
        tempFile << (enable ? "modsecurity on;" : "modsecurity off;") << std::endl;
    }

    nginxConfigFile.close();
    tempFile.close();

    if (rename(tempFilePath.c_str(), nginxConfigPath.c_str()) != 0) {
        std::cerr << "Failed to update nginx config file." << std::endl;
        return false;
    }

    std::cout << "Nginx configuration updated to " << (enable ? "enable" : "disable") << " ModSecurity." << std::endl;
    return true;
}


bool WafGhm::updateModSecurityConfig(bool enable) {
    const std::string modsecConfigPath = "/usr/local/nginx/conf/modsecurity.conf";
    std::ifstream modsecConfigFile(modsecConfigPath);
    std::string line;
    std::string tempFilePath = "/tmp/modsecurity.conf.temp";
    std::ofstream tempFile(tempFilePath);

    if (!modsecConfigFile.is_open() || !tempFile.is_open()) {
        std::cerr << "Failed to open modsecurity config file for reading or writing." << std::endl;
        return false;
    }

    bool configUpdated = false;
    while (std::getline(modsecConfigFile, line)) {
        if (line.find("SecRuleEngine") != std::string::npos) {
            line = (enable) ? "SecRuleEngine On" : "SecRuleEngine Off";
            configUpdated = true;
        }
        tempFile << line << std::endl;
    }

    modsecConfigFile.close();
    tempFile.close();

    if (configUpdated && rename(tempFilePath.c_str(), modsecConfigPath.c_str()) != 0) {
        std::cerr << "Failed to update modsecurity config file." << std::endl;
        return false;
    }

    std::cout << "ModSecurity configuration updated to " << (enable ? "enable" : "disable") << "." << std::endl;
    return configUpdated;
}

extern "C" bool showAuditLogs(char *logs_buffer, int buffer_size) {
    const std::string logFilePath = "/var/log/modsec_audit.log";
    std::ifstream logFile(logFilePath);

    if (!logFile.is_open()) {
        std::cerr << "Failed to open ModSecurity audit log file." << std::endl;
        return false;
    }

    std::string logs;
    std::string line;
    while (std::getline(logFile, line)) {
        logs += line + "\n";
    }

    if (logs.length() >= buffer_size) {
        std::cerr << "Buffer size is too small to hold logs." << std::endl;
        return false;
    }

    std::memcpy(logs_buffer, logs.c_str(), logs.length());
    logFile.close();
    return true;
}


extern "C" bool clearAuditLogs() {
    const std::string logFilePath = "/var/log/modsec_audit.log";
    std::string command = "sudo truncate -s 0 " + logFilePath;
    int result = system(command.c_str());

    if (result != 0) {
        std::cerr << "Failed to clear ModSecurity audit logs." << std::endl;
        return false;
    }

    std::cout << "Audit logs cleared successfully." << std::endl;
    return true;
}

extern "C" const char* showModSecRules() {
    const std::string rulesDir = "/usr/local/nginx/rules";
    DIR* dir = opendir(rulesDir.c_str());
    
    if (!dir) {
        std::cerr << "Failed to open rules directory: " << rulesDir << std::endl;
        return nullptr; 
    }
    
    std::stringstream rulesStream;
    struct dirent* entry;
    while ((entry = readdir(dir)) != nullptr) {
        std::string filename = entry->d_name;
        if (filename.find(".conf") != std::string::npos) {
            rulesStream << filename << "\n";
        }
    }
    
    closedir(dir);
    
    std::string rules = rulesStream.str();
    char* result = new char[rules.size() + 1];
    std::strcpy(result, rules.c_str());
    
    return result;  
}



extern "C" bool isModSecurityEnabled() {
    bool isModSecurityEnabledInNginx = false;
    bool isModSecurityRulesFileIncluded = false;
    bool isSecRuleEngineEnabled = false;

    std::ifstream nginxConfig("/usr/local/nginx/conf/nginx.conf");
    if (nginxConfig.is_open()) {
        std::string line;
        while (std::getline(nginxConfig, line)) {
           // std::cout << "Reading line: " << line << std::endl; // Additional logging to see all lines

            if (line.find("modsecurity on;") != std::string::npos) {
                isModSecurityEnabledInNginx = true;
                std::cout << "Found modsecurity on;" << std::endl; // Log when ModSecurity is enabled
            }
            if (line.find("modsecurity_rules_file") != std::string::npos) {
                isModSecurityRulesFileIncluded = true;
                std::cout << "Found modsecurity_rules_file directive" << std::endl; // Log if rules file is included
            }
        }
        nginxConfig.close();
    } else {
        std::cout << "Failed to open nginx.conf file." << std::endl; // Log if file couldn't be opened
    }

    // // Logging the result before returning
    // std::cout << "ModSecurity in Nginx: " << isModSecurityEnabledInNginx << std::endl;
    // std::cout << "ModSecurity rules file included: " << isModSecurityRulesFileIncluded << std::endl;

    return isModSecurityEnabledInNginx && isModSecurityRulesFileIncluded;
}
```